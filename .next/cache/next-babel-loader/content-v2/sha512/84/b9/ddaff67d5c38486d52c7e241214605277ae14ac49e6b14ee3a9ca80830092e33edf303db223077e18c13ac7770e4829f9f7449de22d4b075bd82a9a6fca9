{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = id => {\n  const nextId = parseInt(id);\n  return notes.find(it => it.id === nextId);\n};\n\nconst getIndexById = id => {\n  const nextId = parseInt(id);\n  return notes.findIndex(it => it.id === nextId);\n}; // get single note\n// update single note\n// delete single note\n\n\nexport default nc() // use connect based middleware\n.use(cors()) // express like routing for methods\n.get(async (req, res) => {\n  res.send({\n    data: getById(req.query.id)\n  });\n}).put(async (req, res) => {\n  const index = getIndexById(req.query.id);\n\n  const newNote = _objectSpread(_objectSpread({}, notes[index]), req.body);\n\n  notes.splice(index, 1, newNote);\n  res.send({\n    updated: true\n  });\n}).delete(async (req, res) => {\n  res.end('hello');\n});","map":{"version":3,"sources":["/Users/rubencarreira/Projects/nextjs-intro/src/pages/api/notes/[id].js"],"names":["nc","cors","notes","getById","id","nextId","parseInt","find","it","getIndexById","findIndex","use","get","req","res","send","data","query","put","index","newNote","body","splice","updated","delete","end"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,OAAO,GAAIC,EAAD,IAAQ;AACtB,QAAMC,MAAM,GAAGC,QAAQ,CAACF,EAAD,CAAvB;AACA,SAAOF,KAAK,CAACK,IAAN,CAAYC,EAAD,IAAQA,EAAE,CAACJ,EAAH,KAAUC,MAA7B,CAAP;AACD,CAHD;;AAKA,MAAMI,YAAY,GAAIL,EAAD,IAAQ;AAC3B,QAAMC,MAAM,GAAGC,QAAQ,CAACF,EAAD,CAAvB;AACA,SAAOF,KAAK,CAACQ,SAAN,CAAiBF,EAAD,IAAQA,EAAE,CAACJ,EAAH,KAAUC,MAAlC,CAAP;AACD,CAHD,C,CAKA;AACA;AACA;;;AACA,eAAeL,EAAE,GACf;AADe,CAEdW,GAFY,CAERV,IAAI,EAFI,EAGb;AAHa,CAIZW,GAJY,CAIR,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEb,OAAO,CAACU,GAAG,CAACI,KAAJ,CAAUb,EAAX;AAAf,GAAT;AACD,CANY,EAOZc,GAPY,CAOR,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAMK,KAAK,GAAGV,YAAY,CAACI,GAAG,CAACI,KAAJ,CAAUb,EAAX,CAA1B;;AACA,QAAMgB,OAAO,mCACRlB,KAAK,CAACiB,KAAD,CADG,GAERN,GAAG,CAACQ,IAFI,CAAb;;AAIAnB,EAAAA,KAAK,CAACoB,MAAN,CAAaH,KAAb,EAAoB,CAApB,EAAuBC,OAAvB;AAEAN,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEQ,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD,CAhBY,EAiBZC,MAjBY,CAiBL,OAAOX,GAAP,EAAYC,GAAZ,KAAoB;AAC1BA,EAAAA,GAAG,CAACW,GAAJ,CAAQ,OAAR;AACD,CAnBY,CAAf","sourcesContent":["import nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = (id) => {\n  const nextId = parseInt(id);\n  return notes.find((it) => it.id === nextId);\n};\n\nconst getIndexById = (id) => {\n  const nextId = parseInt(id);\n  return notes.findIndex((it) => it.id === nextId);\n};\n\n// get single note\n// update single note\n// delete single note\nexport default nc()\n  // use connect based middleware\n  .use(cors())\n  // express like routing for methods\n  .get(async (req, res) => {\n    res.send({ data: getById(req.query.id) });\n  })\n  .put(async (req, res) => {\n    const index = getIndexById(req.query.id);\n    const newNote = {\n      ...notes[index],\n      ...req.body,\n    };\n    notes.splice(index, 1, newNote);\n\n    res.send({ updated: true });\n  })\n  .delete(async (req, res) => {\n    res.end('hello');\n  });\n"]},"metadata":{},"sourceType":"module"}
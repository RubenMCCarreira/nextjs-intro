{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = id => {\n  const nextId = id + '';\n  return notes.find(it => it.id === id);\n}; // crud of single note\n\n\nexport default nc() // use connect based middleware\n.use(cors()) // express like routing for methods\n.get(async (req, res) => {\n  console.log(req.query);\n  res.send({\n    data: getById(req.query.id)\n  });\n}).post(async (req, res) => {\n  const newNote = _objectSpread(_objectSpread({}, req.body), {}, {\n    id: Date.now()\n  });\n\n  notes.push(newNote);\n  res.send({\n    data: notes\n  });\n}).put(async (req, res) => {\n  res.end('hello');\n});","map":{"version":3,"sources":["/Users/rubencarreira/Projects/nextjs-intro/src/pages/api/notes/[id].js"],"names":["nc","cors","notes","getById","id","nextId","find","it","use","get","req","res","console","log","query","send","data","post","newNote","body","Date","now","push","put","end"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,OAAO,GAAIC,EAAD,IAAQ;AACtB,QAAMC,MAAM,GAAGD,EAAE,GAAG,EAApB;AACA,SAAOF,KAAK,CAACI,IAAN,CAAYC,EAAD,IAAQA,EAAE,CAACH,EAAH,KAAUA,EAA7B,CAAP;AACD,CAHD,C,CAKA;;;AACA,eAAeJ,EAAE,GACf;AADe,CAEdQ,GAFY,CAERP,IAAI,EAFI,EAGb;AAHa,CAIZQ,GAJY,CAIR,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAhB;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEb,OAAO,CAACO,GAAG,CAACI,KAAJ,CAAUV,EAAX;AAAf,GAAT;AACD,CAPY,EAQZa,IARY,CAQP,OAAOP,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAMO,OAAO,mCACRR,GAAG,CAACS,IADI;AAEXf,IAAAA,EAAE,EAAEgB,IAAI,CAACC,GAAL;AAFO,IAAb;;AAIAnB,EAAAA,KAAK,CAACoB,IAAN,CAAWJ,OAAX;AAEAP,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEd;AAAR,GAAT;AACD,CAhBY,EAiBZqB,GAjBY,CAiBR,OAAOb,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACa,GAAJ,CAAQ,OAAR;AACD,CAnBY,CAAf","sourcesContent":["import nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = (id) => {\n  const nextId = id + '';\n  return notes.find((it) => it.id === id);\n};\n\n// crud of single note\nexport default nc()\n  // use connect based middleware\n  .use(cors())\n  // express like routing for methods\n  .get(async (req, res) => {\n    console.log(req.query);\n    res.send({ data: getById(req.query.id) });\n  })\n  .post(async (req, res) => {\n    const newNote = {\n      ...req.body,\n      id: Date.now(),\n    };\n    notes.push(newNote);\n\n    res.send({ data: notes });\n  })\n  .put(async (req, res) => {\n    res.end('hello');\n  });\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = id => notes.find(it => it.id === id); // crud of single note\n\n\nexport default nc() // use connect based middleware\n.use(cors()) // express like routing for methods\n.get(async (req, res) => {\n  res.send({\n    data: getById(req.query.id)\n  });\n}).post(async (req, res) => {\n  const newNote = _objectSpread(_objectSpread({}, req.body), {}, {\n    id: Date.now()\n  });\n\n  notes.push(newNote);\n  res.send({\n    data: notes\n  });\n}).put(async (req, res) => {\n  res.end('hello');\n});","map":{"version":3,"sources":["/Users/rubencarreira/Projects/nextjs-intro/src/pages/api/notes/[id].js"],"names":["nc","cors","notes","getById","id","find","it","use","get","req","res","send","data","query","post","newNote","body","Date","now","push","put","end"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,OAAO,GAAIC,EAAD,IAAQF,KAAK,CAACG,IAAN,CAAYC,EAAD,IAAQA,EAAE,CAACF,EAAH,KAAUA,EAA7B,CAAxB,C,CAEA;;;AACA,eAAeJ,EAAE,GACf;AADe,CAEdO,GAFY,CAERN,IAAI,EAFI,EAGb;AAHa,CAIZO,GAJY,CAIR,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAET,OAAO,CAACM,GAAG,CAACI,KAAJ,CAAUT,EAAX;AAAf,GAAT;AACD,CANY,EAOZU,IAPY,CAOP,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAMK,OAAO,mCACRN,GAAG,CAACO,IADI;AAEXZ,IAAAA,EAAE,EAAEa,IAAI,CAACC,GAAL;AAFO,IAAb;;AAIAhB,EAAAA,KAAK,CAACiB,IAAN,CAAWJ,OAAX;AAEAL,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAT;AACD,CAfY,EAgBZkB,GAhBY,CAgBR,OAAOX,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACW,GAAJ,CAAQ,OAAR;AACD,CAlBY,CAAf","sourcesContent":["import nc from 'next-connect';\nimport cors from 'cors';\nimport notes from '../../../data';\n\nconst getById = (id) => notes.find((it) => it.id === id);\n\n// crud of single note\nexport default nc()\n  // use connect based middleware\n  .use(cors())\n  // express like routing for methods\n  .get(async (req, res) => {\n    res.send({ data: getById(req.query.id) });\n  })\n  .post(async (req, res) => {\n    const newNote = {\n      ...req.body,\n      id: Date.now(),\n    };\n    notes.push(newNote);\n\n    res.send({ data: notes });\n  })\n  .put(async (req, res) => {\n    res.end('hello');\n  });\n"]},"metadata":{},"sourceType":"module"}